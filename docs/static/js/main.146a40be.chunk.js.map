{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifSuggestApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","handleSubmit","e","preventDefault","trim","length","categories","onSubmit","type","value","onClick","onChange","target","onBlur","getGifs","category","a","console","log","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","key","GifSuggestApp","each","ReactDOM","render","document","getElementById"],"mappings":"+MAqDeA,EAjDK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,2BAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAY/BC,EAAe,SAACC,GAClBA,EAAEC,iBACGJ,EAAWK,OAAOC,OAAS,GAChCR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAoBO,OAC7CN,EAAc,4BAYlB,OACM,0BAAMO,SAAUN,GACd,2BACIO,KAAK,OACLC,MAAOV,EACPW,QAzBa,SAACR,GACtBF,EAAc,KAyBNW,SA9Bc,SAACT,GACvBF,EAAcE,EAAEU,OAAOH,QA8BfI,OAhBY,SAACX,GACU,IAA3BH,EAAWK,OAAOC,QAClBL,EAAc,8BAgBd,6BACA,4BAAQU,QAdW,SAACR,GACxBD,EAAaC,KAaT,e,uBCzCCY,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACnBC,QAAQC,IAAIH,GACNI,EAFa,iDAEoCC,UAAUL,GAF9C,+DAGAM,MAAMF,GAHN,cAGbG,EAHa,gBAICA,EAAKC,OAJN,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MAEXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,UAAUZ,QAXhB,kBAeZM,GAfY,4CAAH,sDCkBLO,EAjBK,SAAC,GAAsB,IAApBJ,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAI5B,OAFAF,QAAQC,IAAIU,EAAGC,EAAMV,GAGjB,yBAAKc,UAAU,0CAEX,iCACA,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,yBAAKI,UAAU,WACX,2BAAIJ,MCuCLO,EA7CC,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECHJ,SAAEA,GAAc,IAAD,EAEbjB,mBAAS,CAE/B0B,KAAM,GACNa,SAAS,IAL0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KA0BvC,OAjBAC,qBAAU,WAEN1B,EAAQC,GAAU0B,MAAM,SAAAC,GAEpBC,YAAW,WAEPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGf,UAIR,CAACtB,IAEIuB,EDjBuBM,CAAa7B,GAA/Be,EANgB,EAMrBN,KAAYa,EANS,EAMTA,QASnB,OACK,oCACI,wBAAIJ,UAAU,qCAAqClB,GAGhDsB,GAAW,uBAAGJ,UAAU,sCAAb,YAGP,yBAAKA,UAAU,SAGVH,EAAOJ,KACH,SAAAmB,GAAK,OAAK,kBAAC,EAAD,eACMC,IAAOD,EAAMjB,IAETiB,UEAlCE,EA/BO,WAAM,MAIYjD,mBAAS,CAAC,cAJtB,mBAIjBQ,EAJiB,KAILT,EAJK,KAMxB,OACI,oCAEE,2CACA,kBAAC,EAAD,CAAaA,cAAeA,IAGtBS,EAAWoB,KAAI,SAAAsB,GAAI,OAEf,kBAAC,EAAD,CACIF,IAAKE,EACLjC,SAAUiC,SCdlCC,IAASC,OAEP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.146a40be.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropType from 'prop-types';\r\n\r\n// Se recibe setCategories como un prop\r\nconst AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('Categoria a agregar ...');\r\n    \r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleInputClick = (e) =>{\r\n        setInputValue('');\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        if ( inputValue.trim().length > 2 )\r\n        setCategories( categories => ([inputValue,...categories]) );\r\n        setInputValue('Categoria a agregar ...');\r\n    }\r\n\r\n    const handleInputBlur = (e) => {\r\n        if (inputValue.trim().length===0)\r\n            setInputValue('Categoria a agregar ...')\r\n    }\r\n\r\n    const handleButtonSubmit = (e) =>{\r\n        handleSubmit(e);\r\n    }\r\n\r\n    return (\r\n          <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onClick={handleInputClick}\r\n                onChange={handleInputChange}\r\n                onBlur={handleInputBlur}\r\n            />\r\n            <hr/>\r\n            <button onClick={handleButtonSubmit}> Agregar </button>\r\n\r\n          </form>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropType.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n\r\n","\r\nexport const getGifs = async(category) => {\r\n    console.log(category);\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=bCy0IRdOW4n7W8Pvn0TApz0ASYRI1ULT`;\r\n    const resp = await fetch(url);\r\n    const {data}= await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            // ? Validate if element exists\r\n            url: img.images?.downsized.url,\r\n        }\r\n    } )\r\n\r\n    return gifs;\r\n\r\n};","import React from 'react'\r\n\r\nconst GifGridItem = ( {id,title,url} ) => {\r\n    \r\n    console.log(id,title,url);\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n\r\n            <header></header>\r\n            <img src={url} alt={title}/>\r\n            <div className=\"content\">\r\n                <p>{title}</p>\r\n            </div>\r\n\r\n        </div>\r\n    ) \r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n// import {getGifs} from '../helpers/getGifs'\r\n// import PropTypes from 'prop-types'\r\n\r\nconst GifGrid = ({category}) => {\r\n    \r\n    //USANDO USE STATE ANTES DE CREAR CUSTOM HOOK\r\n    // const [images, setImages] = useState([]);\r\n    // SE UTILIZA NOMBRE:RENOMBRE PARA REDEFINIR NOMBRE DE VARIABLE RECIBIDA\r\n\r\n    const {data:images,loading} = useFetchGifs(category);\r\n    \r\n    // Antes de usar custom Hook\r\n    // useEffect( () => {\r\n    //     getGifs(category).then(imgs => setImages(imgs));\r\n    // },[category] );\r\n\r\n   \r\n    \r\n    return (\r\n         <>\r\n             <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>  \r\n            {\r\n                //SE UTILIZA CUANDO SE ESPERA UN SOLO RESULTADO \r\n                loading && <p className=\"animate__animated animate__flipInX\">Cargando</p>\r\n            }\r\n            {\r\n                    <div className=\"cards\">\r\n                    \r\n                         {\r\n                         images.map( \r\n                             image =>  <GifGridItem \r\n                                             key = {image.id}\r\n                                             // Se envia elemento por elemento, no envuelto en un arreglo\r\n                                             {...image}\r\n                                             />\r\n                             )\r\n                         }        \r\n                 </div>\r\n            }\r\n         </>\r\n    )\r\n\r\n}\r\n\r\n// GifGrid.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( category ) =>{\r\n\r\n    const [state, setState] = useState({\r\n        \r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(()=>{\r\n\r\n        getGifs(category).then (imgs => {\r\n            \r\n            setTimeout(()=> {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n\r\n            },3000);\r\n            \r\n        })\r\n\r\n    },[category])\r\n\r\n    return state;\r\n\r\n}","import React, {useState}  from 'react'\r\n// import PropTypes from 'prop-types'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifSuggestApp = () => {\r\n    \r\n    // setCategories se exporta a AddCategory para ser tratado desde el componente\r\n    //const [categories, setCategories] = useState(['One Punch', 'Psycho Pass', 'Macross'])\r\n    const [categories, setCategories] = useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n\r\n          <h2>Gif Suggest</h2>\r\n          <AddCategory setCategories={setCategories}/>\r\n          \r\n            {\r\n                categories.map(each=>\r\n                    // <li key = {each} > {each} </li>\r\n                    <GifGrid \r\n                        key={each}\r\n                        category={each}\r\n                    />\r\n                ) \r\n            }\r\n          \r\n\r\n        </>\r\n    )\r\n}\r\n\r\n// GifSuggestApp.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifSuggestApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css'\n\nimport GifSuggestApp from './GifSuggestApp';\n\n\nReactDOM.render(\n\n  <GifSuggestApp/>,\n  document.getElementById('root')\n\n);\n\n"],"sourceRoot":""}